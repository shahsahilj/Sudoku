# Sudoku
Solution to the sudoku game as a Constraint Satisfaction Problem

1. ac3solver.py – This file implements the AC3 algorithm. There are many helper methods like
getNeighbors(), isSolved(), check_consistency().
The main logic of the code is to add all pairs of neighbors to a worklist. Then each pair is checked for
consistency, i.e., for every [x,y] for all values in x there should be a value in y. If there isn't then that value
is removed from x. If the x is changed at any stage, all neighbors of x are added with x back to the
worklist.
Then after the first run of AC3, if the problem is not yet solved, then the smallest domain is selected and
a number is assigned randomly from that domain. And the consistency is checked for that element and its
neighbors. And so on, till either the problem becomes not solvable or it is solved.


2. backtrack.py – This file implements the backtracking algorithm with a forward checking. The
algorithm first applies the basic AC3 algorithm to the sudoku. It then makes a recursive call to solve the
problem. In the recursion, it takes the smallest domain and assigns one value from its domain and then
forward checks the arc consistency with this assignment. If it is consistent then a recursive call is made
using that assignment. If the recursive call comes back positive, then the problem is solved, otherwise
another value is assigned from the domain and tested in a similar way.
